## add unknown sku


### create normal order
grpcurl -plaintext -d @ localhost:8083 loms.Loms.OrderCreate <<EOM
{
  "user": 31337,
  "items": [
    {
      "sku": 1148162,
      "count": 3
    },
    {
      "sku": 1625903,
      "count": 2
    }
  ]
}
EOM
### expected {"orderID":1}


### get info, assert status="awaiting payment"
POST http://localhost:8083/order/info
Content-Type: application/json

grpcurl -plaintext -d @ loms.Loms.OrderInfo <<EOM
grpcurl -plaintext -d @ localhost:8083 loms.Loms.OrderInfo <<EOM
{
  "orderID": 1
}
EOM
### expected {"status":"awaiting payment","user":31337,"Items":[{"sku":4487693,"count":3},{"sku":4669069,"count":2}]}


### pay order
grpcurl -plaintext -d @ localhost:8083 loms.Loms.PayOrder <<EOM
{
  "orderId": 2
}
EOM

### expected {}


### check actual status is "payed"
grpcurl -plaintext -d @ localhost:8083 loms.Loms.OrderInfo <<EOM
{
  "orderId": 1
}
EOM

### expected {"status":"payed","user":31337,"Items":[{"sku":4487693,"count":3},{"sku":4669069,"count":2}]}


### unable to cancel payed order
grpcurl -plaintext -d @ localhost:8083 loms.Loms.CancelOrder <<EOM
{
  "orderId": 1
}
EOM

### expected order/cancel: command handler failed: unexpected order status, actual="payed": order wrong status; 412 (Precondition Failed)


### get unknown order
grpcurl -plaintext -d @ localhost:8083 loms.Loms.OrderInfo <<EOM
{
  "orderId": 404
}
EOM

### expected order/info: command handler failed: order not found; 404 (Not Found)


### cancel order not exists
grpcurl -plaintext -d @ localhost:8083 loms.Loms.CancelOrder <<EOM
{
  "orderId": 404
}
EOM
### expected order/cancel: command handler failed: order not found; 404 (Not Found)


### create order stocks not enough
grpcurl -plaintext -d @ localhost:8083 loms.Loms.CreateOrder <<EOM
{
  "user": 31337,
  "items": [
    {
      "sku": 404,
      "count": 30000
    }
  ]
}
EOM

### expected: order/create: command handler failed: stock not enough; 412 (Precondition Failed)


### check order status is failed
grpcurl -plaintext -d @ localhost:8083 loms.Loms.OrderInfo <<EOM
{
  "orderId": 4
}
EOM

### expected: {"status":"failed","user":31337,"Items":[{"sku":404,"count":3}]}

### cancel failed order
POST http://localhost:8083/order/cancel
Content-Type: application/json

{
  "orderId": 3
}
### expected order/cancel: command handler failed: unexpected order status, actual="failed": order wrong status; 412 (Precondition Failed)


### stock info for normal sku
grpcurl -plaintext -d @ localhost:8083 loms.Loms.StocksInfo <<EOM
{
  "sku": 2618151
}
EOM

### expected {"count":1000}


### stock info for unknown sku
grpcurl -plaintext -d @ localhost:8083 loms.Loms.StocksInfo <<EOM
{
  "sku": 3012154
}
EOM
### expected {}; 200 OK


### reserve 500 count of the stock
POST http://localhost:8083/order/create
Content-Type: application/json

{
  "user": 31337,
  "items": [
    {
      "sku": 2958025,
      "count": 500
    }
  ]
}
### expected: {"orderID":3}


### check actual stocks
POST http://localhost:8083/stock/info
Content-Type: application/json

{
  "sku": 2958025
}
### expected {"count":500}; 200 OK


### cancel order
POST http://localhost:8083/order/cancel
Content-Type: application/json

{
  "orderID": 3
}
### expected 200 OK


### check canceled order status
POST http://localhost:8083/order/info
Content-Type: application/json

{
  "orderID": 3
}
### expected {"status":"cancelled","user":31337,"Items":[{"sku":2958025,"count":500}]}


### check stocks returns
POST http://localhost:8083/stock/info
Content-Type: application/json

{
  "sku": 2958025
}
### expected {"count":1000}; 200 OK
