// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package stocks_repository

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (status, user_id)
VALUES ($1, $2)
RETURNING id
`

type CreateOrderParams struct {
	Status string
	UserID int64
}

func (q *Queries) CreateOrder(ctx context.Context, arg *CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.Status, arg.UserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrderInfo = `-- name: GetOrderInfo :one
SELECT id, status, user_id
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderInfo(ctx context.Context, id int64) (*Order, error) {
	row := q.db.QueryRow(ctx, getOrderInfo, id)
	var i Order
	err := row.Scan(&i.ID, &i.Status, &i.UserID)
	return &i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT sku_id, items_count
FROM order_items
WHERE order_id = $1
`

type GetOrderItemsRow struct {
	SkuID      int64
	ItemsCount int64
}

func (q *Queries) GetOrderItems(ctx context.Context, orderID int64) ([]*GetOrderItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetOrderItemsRow
	for rows.Next() {
		var i GetOrderItemsRow
		if err := rows.Scan(&i.SkuID, &i.ItemsCount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrderItem = `-- name: InsertOrderItem :exec
INSERT INTO order_items (order_id, sku_id, items_count)
VALUES ($1, $2, $3)
ON CONFLICT (order_id, sku_id) DO UPDATE
    SET items_count = order_items.items_count + EXCLUDED.items_count
`

type InsertOrderItemParams struct {
	OrderID    int64
	SkuID      int64
	ItemsCount int64
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg *InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem, arg.OrderID, arg.SkuID, arg.ItemsCount)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg *UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}
